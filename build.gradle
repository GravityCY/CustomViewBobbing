import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.23'
}

def javaVersionNum = 17
def javaVersion = JavaVersion.toVersion(javaVersionNum)
def changelog = "- Fixed a compatibility issue."
def mcVersions = [project.minecraft_version]

version = project.mod_version
group = "me.gravityio"

base {
    archivesName = project.mod_id
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "dev.isxander.yacl:yet-another-config-lib-fabric:${yacl_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    modCompileOnly "maven.modrinth:sodium:mc${sodium_version}" //
    modCompileOnly "maven.modrinth:iris:${iris_version}"
}

tasks.register('publishMod') {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD");

    def mainFile = upload(project.curseforge_id, remapJar)
    mainFile.changelog = changelog
    mcVersions.forEach {
        mainFile.addGameVersion(it)
    }
    mainFile.addJavaVersion("Java ${javaVersionNum}")
    mainFile.displayName = "${project.mod_name} ${project.mod_version}"
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addRequirement("fabric-api")
    mainFile.addOptional("modmenu", "yacl")
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = project.modrinth_id
    versionName = "${project.mod_name} ${project.mod_version}"
    versionNumber = mod_version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

processResources  {
    def modProperties = [
            "mod_id": project.mod_id,
            "mod_name": project.mod_name,
            "mod_version": project.mod_version,
            "mod_description": project.mod_description,
            "mod_author": project.mod_author,
            "mod_sources": project.mod_sources,
            "mod_license": project.mod_license,
            "loader_version": project.loader_version,
            "minecraft_version": project.minecraft_version,
            "fabric_version": project.fabric_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = javaVersionNum
}

java {
    withSourcesJar()

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}