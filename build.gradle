import net.darkhax.curseforgegradle.TaskPublishCurseForge
import groovy.json.JsonSlurper

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.23'
    id "me.gravityio.replacementplugin" version "0.0.7" // my local experimental plugin, just delete if you fork
}

def changelog = "- Developing for old Minecraft versions should be easier now, the codebase is now based on stonecutter!"
def javaVersionNum = project.java_version.toInteger()
def javaVersionObj = JavaVersion.toVersion(javaVersionNum)
def mcVersions = project.minecraft_supported_versions.split(",").toList()

version = "$rootProject.mod_version+$project.name"
group = "me.gravityio"

if (stonecutter.current.isActive) {
    rootProject.tasks.register("buildActive") {
        group = "project"
        dependsOn(tasks.named("build"))
    }
}

base {
    archivesName = rootProject.mod_id
}

loom {
    runConfigs.all {
        ideConfigGenerated(true) // Run configurations are not created for subprojects by default
        runDir = "../../run" // Use a shared run folder and just create separate worlds
    }
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.name}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    if (project.name == "1.20.3" || project.name == "1.20") {
        modCompileOnly "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version_api}"
        modLocalRuntime "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version_mod}"
    } else if (project.name == "1.20.1") {
        modCompileOnly "dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version_api}"
        modLocalRuntime "dev.isxander:yet-another-config-lib:${project.yacl_version_mod}-fabric"
    } else {
        modCompileOnly "dev.isxander:yet-another-config-lib:${project.yacl_version_api}-fabric"
        modLocalRuntime "dev.isxander:yet-another-config-lib:${project.yacl_version_mod}-fabric"
    }

    modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version_api}"
    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version_api}"

    modCompileOnly "maven.modrinth:sodium:${project.sodium_version_api}"
    modCompileOnly "maven.modrinth:iris:${project.iris_version_api}"

    modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version_mod}"
    modLocalRuntime "com.terraformersmc:modmenu:${project.modmenu_version_mod}"
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric_api_url": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl_url": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu_url": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"]
    ]
}

tasks.register("depVersions") {
    doLast {
        def projects = ["fabric-api", "modmenu", "yacl", "sodium", "iris"]
        def client = HttpClient.newBuilder().build()
        for (aproject in projects) {
            def encLoaders = URLEncoder.encode("[\"fabric\"]", "UTF-8")
            def encVersions = URLEncoder.encode("[\"${project.name}\"]", "UTF-8")

            def query = "${aproject}/version?loaders=${encLoaders}&game_versions=${encVersions}"
            def uri = URI.create("https://api.modrinth.com/v2/project/${query}")
            def req = HttpRequest.newBuilder()
                    .uri(uri)
                    .header("User-Agent", "GravityCY/gradle_test_project/0.0.0")
                    .GET()
                    .build()

            def res = client.send(req, HttpResponse.BodyHandlers.ofString())
            def json = new JsonSlurper().parseText(res.body()) as List<Map<String, String>>
            println "Most recent version of ${aproject}: ${json[0].version_number}"
        }
    }
}

tasks.register('publishMod') {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD");

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.changelog = changelog
    mcVersions.forEach {
        mainFile.addGameVersion(it)
    }
    mainFile.addJavaVersion("Java ${project.java_version}")
    mainFile.displayName = "${rootProject.mod_name} ${project.version}"
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addRequirement("fabric-api")
    mainFile.addOptional("modmenu", "yacl")
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = rootProject.modrinth_id
    versionName = "${rootProject.mod_name} ${project.version}"
    versionNumber = project.version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

processResources  {
    def modProperties = [
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_version": project.version,
            "mod_description": rootProject.mod_description,
            "mod_author": rootProject.mod_author,
            "mod_sources": rootProject.mod_sources,
            "mod_license": rootProject.mod_license,
            "loader_version": rootProject.loader_version,
            "minecraft_version_range": project.minecraft_version_range,
            "fabric_version": project.fabric_version_api,
            "yacl_version": project.yacl_version_api,
            "java_version": project.java_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = javaVersionNum
}

java {
    withSourcesJar()

    sourceCompatibility = javaVersionObj
    targetCompatibility = javaVersionObj
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}