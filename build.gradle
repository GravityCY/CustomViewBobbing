plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = project.archives_base_name
    versionName = "ViewBobbingOptions " + project.mod_version
    versionNumber = project.mod_version
    uploadFile = remapJar
    gameVersions = ["1.19.2"]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
    syncBodyFrom = rootProject.file("README.md").text
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url = "https://maven.terraformersmc.com/" } // Mod Menu
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // YACL
    modCompileOnly("dev.isxander:yet-another-config-lib:${project.yacl_version}") {
        exclude(group: "com.terraformersmc")
    }
    // Mod Menu
    modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"
    // Sodium
    modCompileOnly "maven.modrinth:sodium:mc1.19.2-0.4.4"
    // Iris
    modCompileOnly "maven.modrinth:iris:1.6.0+1.19.2"

//    modLocalRuntime "maven.modrinth:sodium:mc1.19.2-0.4.4"
//    modLocalRuntime "maven.modrinth:iris:1.6.0+1.19.2"

    implementation "com.github.LlamaLad7:MixinExtras:0.1.1"
    annotationProcessor "com.github.LlamaLad7:MixinExtras:0.1.1"
    include "com.github.LlamaLad7:MixinExtras:0.1.1"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "yacl_version", project.yacl_version
    inputs.property "modmenu_version", project.modmenu_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version,
                "yacl_version": project.yacl_version,
                "modmenu_version": project.modmenu_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
