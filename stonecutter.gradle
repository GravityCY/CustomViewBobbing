plugins {
    id "me.gravityio.discord-webhook" version "0.0.3"
}

plugins.apply "dev.kikugie.stonecutter"
stonecutter.active "1.21" /* [SC] DO NOT EDIT */

def secrets = new Properties()
rootProject.file("secrets.properties").withInputStream { secrets.load(it) }

rootProject.ext.data = new LinkedHashMap<String, UploadData>()
rootProject.ext.changelog = file("CHANGELOG.md").text

stonecutter.versions.forEach {
    rootProject.ext.data.put(it.project, new UploadData())
}

stonecutter.registerChiseled tasks.register("chiseledBuild", stonecutter.chiseled) { 
    setGroup "project"
    ofTask "build"
}

stonecutter.registerChiseled tasks.register("chiseledPublish") {
    group = "project"
    dependsOn "chiseledStonecutter"
    chiseledDepends(it, "publishMod")

    doLast {
        def webhookUrl = secrets.get("discord_webhook").toString()

        def message = ""

        def mdSlug = "viewboboptions"
        def cfSlug = "viewboboptions"

        def discordChannel = "https://discord.com/channels/1112046604183162961/1246456621404524605"
        def mentionId = "1277913110195208192"

        rootProject.ext.data.each {
            UploadData upData = it.value
            message += "# $rootProject.mod_name ${rootProject.mod_version}+${it.key} Update ([Modrinth](<https://modrinth.com/mod/${mdSlug}/version/${upData.modrinthFileId}>) | [Curseforge](<https://curseforge.com/minecraft/mc-mods/${cfSlug}/files/${upData.curseFileId}>))\n"
        }
        message += "$rootProject.ext.changelog\n\n"

//        message += "**To view the details of the changelog visit the [Modrinth changelog page](<https://modrinth.com/mod/${mdSlug}/changelog>) or the [CurseForge files page](<https://curseforge.com/minecraft/mc-mods/${cfSlug}/files/${rootProject.ext.data.firstEntry().value.curseFileId}>)**\n"
        message += "**As always report any issues on my [GitHub](<${rootProject.mod_sources}>) or in ${discordChannel}**\n"
        message += "<@&${mentionId}>"

        rootProject.file("temp").mkdir()
        rootProject.file("temp/discord.md").write(message)

        def config = discord_webhook.prepare(webhookUrl)
        config.content(message)
        discord_webhook.send()
    }
}

def chiseledDepends(Task task, String subtaskName) {
    def setupTask = tasks.named("chiseledStonecutter")
    stonecutter.versions.forEach {
        def proj = rootProject.project(it.project)
        def subtask = proj.tasks.named(subtaskName).get()
        task.dependsOn(subtask)
        subtask.mustRunAfter(setupTask)
    }
}
